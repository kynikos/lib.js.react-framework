'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// Generated by CoffeeScript 2.2.3
(function () {
  // This file is part of react-framework
  // Copyright (C) 2018-present Dario Giovannetti <dev@dariogiovannetti.net>
  // Licensed under MIT
  // https://github.com/kynikos/react-framework/blob/master/LICENSE
  var ConnectedRouter,
      Link,
      Provider,
      ReactDOM,
      Route,
      applyMiddleware,
      combineReducers,
      composeWithDevTools,
      connect,
      createFactory,
      createHistory,
      createStore,
      helpers,
      push,
      r,
      responsiveStateReducer,
      responsiveStoreEnhancer,
      routerActions,
      routerMiddleware,
      routerReducer,
      thunk,
      withRouter,
      _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };

  require('react');

  ReactDOM = require('react-dom');

  helpers = require('@kynikos/react-helpers');

  var _helpers = helpers;
  createFactory = _helpers.createFactory;
  r = _helpers.r;


  createHistory = require('history/createBrowserHistory').default;

  var _require = require('react-router-dom');

  Route = _require.Route;
  withRouter = _require.withRouter;
  Link = _require.Link;

  var _require2 = require('redux');

  createStore = _require2.createStore;
  combineReducers = _require2.combineReducers;
  applyMiddleware = _require2.applyMiddleware;

  var _require3 = require('react-redux');

  Provider = _require3.Provider;
  connect = _require3.connect;

  var _require4 = require('react-router-redux');

  ConnectedRouter = _require4.ConnectedRouter;
  routerReducer = _require4.routerReducer;
  routerMiddleware = _require4.routerMiddleware;
  routerActions = _require4.routerActions;
  push = _require4.push;


  thunk = require('redux-thunk').default;

  var _require5 = require('redux-devtools-extension');

  composeWithDevTools = _require5.composeWithDevTools;


  try {
    var _require6 = require('redux-responsive');

    responsiveStateReducer = _require6.responsiveStateReducer;
    responsiveStoreEnhancer = _require6.responsiveStoreEnhancer;
  } catch (error) {
    responsiveStateReducer = null;
    responsiveStoreEnhancer = null;
  }

  // Other useful modules:
  // redux-actions
  // reselect
  // jss
  // react-bootstrap
  module.exports = function (reducerMap) {
    var App, history, rootReducerMap, store, storeEnhancers;
    history = createHistory();
    rootReducerMap = _extends({}, reducerMap, {
      // This is expressly required to be called 'router'
      router: routerReducer
    });
    if (responsiveStateReducer) {
      rootReducerMap.browser = responsiveStateReducer;
    }
    storeEnhancers = [];
    if (responsiveStoreEnhancer) {
      storeEnhancers.push(responsiveStoreEnhancer);
    }
    storeEnhancers.push(applyMiddleware(thunk, routerMiddleware(history)));
    store = createStore(combineReducers(rootReducerMap), composeWithDevTools.apply(undefined, _toConsumableArray(storeEnhancers)));
    App = function App(root) {
      return r(Provider, { store: store }, r(ConnectedRouter, { history: history }, root));
    };
    return {
      ReactDOM: ReactDOM,
      App: App,
      Route: createFactory(Route),
      withRouter: withRouter,
      connect: connect,
      helpers: helpers,
      Link: createFactory(Link),
      history: history,
      routerActions: routerActions,
      push: push
    };
  };
}).call(undefined);