'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// Generated by CoffeeScript 2.3.2
(function () {
  // This file is part of react-framework
  // Copyright (C) 2018-present Dario Giovannetti <dev@dariogiovannetti.net>
  // Licensed under MIT
  // https://github.com/kynikos/react-framework/blob/master/LICENSE
  var ConnectedRouter, Link, Provider, ReactDOM, Redirect, Route, Switch, applyMiddleware, combineReducers, composeWithDevTools, connect, connectRouter, createFactory, createHistory, createResponsiveStateReducer, createStore, go, goBack, goForward, h, helpers, push, replace, responsiveStateReducer, responsiveStoreEnhancer, routerMiddleware, thunk, withRouter;

  require('react');

  ReactDOM = require('react-dom');

  helpers = require('@kynikos/react-helpers');

  var _helpers = helpers;
  createFactory = _helpers.createFactory;
  h = _helpers.h;


  createHistory = require('history/createBrowserHistory').default;

  var _require = require('react-router-dom');

  Switch = _require.Switch;
  Route = _require.Route;
  Redirect = _require.Redirect;
  withRouter = _require.withRouter;
  Link = _require.Link;

  var _require2 = require('redux');

  createStore = _require2.createStore;
  combineReducers = _require2.combineReducers;
  applyMiddleware = _require2.applyMiddleware;

  var _require3 = require('react-redux');

  Provider = _require3.Provider;
  connect = _require3.connect;

  var _require4 = require('connected-react-router');

  ConnectedRouter = _require4.ConnectedRouter;
  connectRouter = _require4.connectRouter;
  routerMiddleware = _require4.routerMiddleware;
  push = _require4.push;
  replace = _require4.replace;
  go = _require4.go;
  goBack = _require4.goBack;
  goForward = _require4.goForward;


  thunk = require('redux-thunk').default;

  var _require5 = require('redux-devtools-extension');

  composeWithDevTools = _require5.composeWithDevTools;


  try {
    var _require6 = require('redux-responsive');

    responsiveStateReducer = _require6.responsiveStateReducer;
    createResponsiveStateReducer = _require6.createResponsiveStateReducer;
    responsiveStoreEnhancer = _require6.responsiveStoreEnhancer;
  } catch (error) {
    responsiveStateReducer = null;
    responsiveStoreEnhancer = null;
  }

  // Other useful modules:
  // redux-actions
  // reselect
  // jss
  // styled-jss
  module.exports = function (reducerMap, _ref) {
    var responsiveBreakpoints = _ref.responsiveBreakpoints;

    var App, createRootReducer, history, store, storeEnhancers;
    history = createHistory();
    if (responsiveStateReducer) {
      reducerMap.browser = responsiveBreakpoints && createResponsiveStateReducer(responsiveBreakpoints) || responsiveStateReducer;
    }
    createRootReducer = function createRootReducer(history) {
      return combineReducers(_extends({}, reducerMap, {
        // This is expressly required to be called 'router'
        router: connectRouter(history)
      }));
    };
    storeEnhancers = [];
    if (responsiveStoreEnhancer) {
      storeEnhancers.push(responsiveStoreEnhancer);
    }
    storeEnhancers.push(applyMiddleware(thunk, routerMiddleware(history)));
    store = createStore(createRootReducer(history), composeWithDevTools.apply(undefined, _toConsumableArray(storeEnhancers)));
    App = function App(root) {
      return h(Provider, { store: store }, h(ConnectedRouter, { history: history }, root));
    };
    return {
      ReactDOM: ReactDOM,
      App: App,
      Switch: createFactory(Switch),
      Route: createFactory(Route),
      Redirect: createFactory(Redirect),
      store: store,
      withRouter: withRouter,
      connect: connect,
      helpers: helpers,
      Link: createFactory(Link),
      history: history,
      push: push,
      replace: replace,
      go: go,
      goBack: goBack,
      goForward: goForward
    };
  };
}).call(undefined);